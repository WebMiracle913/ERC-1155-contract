{
  "address": "0x68647d0316E59BB8083c23bBB66cFd0289188Fda",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_whitelistRoot",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "preSaleMintWithEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "preSaleMintWithShib",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presalePriceInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presalePriceInShib",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMintWithEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMintWithShib",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicsalePriceInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicsalePriceInShib",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setPreSaleStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shib",
          "type": "address"
        }
      ],
      "name": "setShib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setWhitelistRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shib",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8414a4c033f374a5cbb07e0e4b17972008146f26f4a79537dae789949dcf2a34",
  "receipt": {
    "to": null,
    "from": "0x8Fa8D87C6A85bb94C8473f7E54f9e14d54DF5e2e",
    "contractAddress": "0x68647d0316E59BB8083c23bBB66cFd0289188Fda",
    "transactionIndex": 1,
    "gasUsed": "2929163",
    "logsBloom": "0x
    "blockHash": "0x499e80774d70170ffc3adfe3ca36c72f66fa4d3690d2644460ec694b377fc14d",
    "transactionHash": "0x8414a4c033f374a5cbb07e0e4b17972008146f26f4a79537dae789949dcf2a34",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10332032,
        "transactionHash": "0x8414a4c033f374a5cbb07e0e4b17972008146f26f4a79537dae789949dcf2a34",
        "address": "0x68647d0316E59BB8083c23bBB66cFd0289188Fda",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008fa8d87c6a85bb94c8473f7e54f9e14d54df5e2e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x499e80774d70170ffc3adfe3ca36c72f66fa4d3690d2644460ec694b377fc14d"
      }
    ],
    "blockNumber": 10332032,
    "cumulativeGasUsed": "7152448",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbcef84a3b38d1f4dad329532950aef851e42d982ab87d00b11cc8e241d61d074",
    "https://ipfs.io/ipfs/QmQtN81i9eNrD3wxcr67scDpLvZDDXxbmAvNXMaZh3D6tB/"
  ],
  "solcInputHash": "0d44e09405a4ffac19d925a63d1a492f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whitelistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"preSaleMintWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"preSaleMintWithShib\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePriceInShib\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"publicSaleMintWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"publicSaleMintWithShib\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicsalePriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicsalePriceInShib\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPreSaleStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shib\",\"type\":\"address\"}],\"name\":\"setShib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setWhitelistRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft.sol\":\"ShibeFace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/nft.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2022-01-21\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./utils/Merkle.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\n// Dev: 0x728aaa46815B8106b72EdD6E73feDF2233d3E29c\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ncontract ShibeFace is ERC1155, Merkle, ReentrancyGuard {\\r\\n    string public constant name = \\\"ShibeFace\\\";\\r\\n    string public constant symbol = \\\"SHIBE\\\";\\r\\n\\r\\n    uint256 public totalSupply = 0;\\r\\n    uint256 public constant presalePriceInEth = 0.0777 ether;\\r\\n    uint256 public constant publicsalePriceInEth = 0.0999 ether;\\r\\n    uint256 public constant presalePriceInShib = 7777777 ether;\\r\\n    uint256 public constant publicsalePriceInShib = 9999999 ether;\\r\\n\\r\\n    address public shib = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE;\\r\\n    address public developer = 0x728aaa46815B8106b72EdD6E73feDF2233d3E29c;\\r\\n\\r\\n    uint256 public preSaleStart = 1647333008;\\r\\n    uint256 public constant preSaleMaxSupply = 111;\\r\\n\\r\\n    uint256 public publicSaleStart = 1657333008;\\r\\n    uint256 public constant publicSaleMaxSupply = 333;\\r\\n\\r\\n    mapping(address => bool) whitelist;\\r\\n\\r\\n    constructor(\\r\\n        bytes32 _whitelistRoot,\\r\\n        string memory uri\\r\\n    ) Merkle(_whitelistRoot) ERC1155(uri) {}\\r\\n\\r\\n    function setShib(address _shib) external onlyOwner {\\r\\n        shib = _shib;\\r\\n    }\\r\\n\\r\\n    function setURI(string memory uri) public onlyOwner {\\r\\n        _setURI(uri);\\r\\n    }\\r\\n\\r\\n    function setPreSaleStart(uint256 timestamp) public onlyOwner {\\r\\n        preSaleStart = timestamp;\\r\\n    }\\r\\n\\r\\n    function setPublicSaleStart(uint256 timestamp) public onlyOwner {\\r\\n        publicSaleStart = timestamp;\\r\\n    }\\r\\n\\r\\n    function preSaleIsActive() public view returns (bool) {\\r\\n        return\\r\\n            preSaleStart <= block.timestamp &&\\r\\n            publicSaleStart >= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function publicSaleIsActive() public view returns (bool) {\\r\\n        return publicSaleStart <= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 count) internal {\\r\\n        if (count > 1) {\\r\\n            uint256[] memory ids = new uint256[](uint256(count));\\r\\n            uint256[] memory amounts = new uint256[](uint256(count));\\r\\n\\r\\n            for (uint256 i = 0; i < count; i++) {\\r\\n                ids[i] = totalSupply + i;\\r\\n                amounts[i] = 1;\\r\\n            }\\r\\n\\r\\n            _mintBatch(to, ids, amounts, \\\"\\\");\\r\\n        } else {\\r\\n            _mint(to, totalSupply, 1, \\\"\\\");\\r\\n        }\\r\\n\\r\\n        totalSupply += count;\\r\\n    }\\r\\n\\r\\n    function preSaleMint(uint256 count, bytes32[] calldata proof)\\r\\n        internal\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(preSaleIsActive(), \\\"Pre-sale is not active.\\\");\\r\\n        require(!whitelist[msg.sender], \\\"Already claimed.\\\");\\r\\n        require(\\r\\n            _whitelistVerify(\\r\\n                _whitelistLeaf(\\r\\n                    msg.sender /*, tokenId*/\\r\\n                ),\\r\\n                proof\\r\\n            ),\\r\\n            \\\"Invalid\\\"\\r\\n        );\\r\\n        require(count > 0, \\\"Count must be greater than 0.\\\");\\r\\n        require(\\r\\n            totalSupply + count <= preSaleMaxSupply,\\r\\n            \\\"Count exceeds the maximum allowed supply.\\\"\\r\\n        );\\r\\n\\r\\n        mint(msg.sender, count);\\r\\n        whitelist[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    function preSaleMintWithEth(uint256 count, bytes32[] calldata proof)\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        require(msg.value >= presalePriceInEth * count, \\\"Not enough ether.\\\");\\r\\n        preSaleMint(count, proof);\\r\\n    }\\r\\n\\r\\n    function preSaleMintWithShib(uint256 count, bytes32[] calldata proof)\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        IERC20(shib).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            presalePriceInShib\\r\\n        );\\r\\n        preSaleMint(count, proof);\\r\\n    }\\r\\n\\r\\n    function publicSaleMint(uint256 count) internal {\\r\\n        require(publicSaleIsActive(), \\\"Public sale is not active.\\\");\\r\\n        require(count > 0, \\\"Count must be greater than 0.\\\");\\r\\n        require(\\r\\n            totalSupply + count <= publicSaleMaxSupply,\\r\\n            \\\"Count exceeds the maximum allowed supply.\\\"\\r\\n        );\\r\\n\\r\\n        mint(msg.sender, count);\\r\\n    }\\r\\n\\r\\n    function publicSaleMintWithEth(uint256 count) external payable {\\r\\n        require(msg.value >= publicsalePriceInEth * count, \\\"Not enough ether.\\\");\\r\\n        publicSaleMint(count);\\r\\n    }\\r\\n\\r\\n    function publicSaleMintWithShib(uint256 count) external payable {\\r\\n        IERC20(shib).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            publicsalePriceInShib\\r\\n        );\\r\\n        publicSaleMint(count);\\r\\n    }\\r\\n\\r\\n    function batchMint(address[] memory addresses) external onlyOwner {\\r\\n        require(\\r\\n            totalSupply + addresses.length <= publicSaleMaxSupply,\\r\\n            \\\"Count exceeds the maximum allowed supply.\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            mint(addresses[i], 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0);\\r\\n        (bool dev, ) = developer.call{value: balance / 10}(\\\"\\\");\\r\\n        require(dev, \\\"Transfer ETH failed to developer.\\\");\\r\\n        (bool success, ) = msg.sender.call{value: (balance * 9) / 10}(\\\"\\\");\\r\\n        require(success, \\\"Transfer ETH failed to owner.\\\");\\r\\n\\r\\n        uint256 balanceShib = IERC20(shib).balanceOf(address(this));\\r\\n        IERC20(shib).transfer(developer, balanceShib / 10);\\r\\n        IERC20(shib).transfer(msg.sender, (balanceShib * 9) / 10);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x329517774d50bdee283662145d024d89af34078d8674b367b11d5f7638317732\",\"license\":\"MIT\"},\"contracts/utils/Merkle.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Merkle is Ownable {\\r\\n    bytes32 private whitelist;\\r\\n\\r\\n    constructor(bytes32 _whitelist) {\\r\\n        whitelist = _whitelist;\\r\\n    }\\r\\n\\r\\n    function _whitelistLeaf(\\r\\n        address account /*, uint256 tokenId*/\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    /*tokenId,*/\\r\\n                    account\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _whitelistVerify(bytes32 leaf, bytes32[] memory proof)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return MerkleProof.verify(proof, whitelist, leaf);\\r\\n    }\\r\\n\\r\\n    function setWhitelistRoot(bytes32 _root) external onlyOwner {\\r\\n        whitelist = _root;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xce70eb73bc06353554173b60dcd8420bea2b18075e741a359a265e532c03fd96\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040526000600655600780546001600160a01b03199081167395ad61b0a150d79219dcf64e1e6cc01f0b64c4ce179091556008805490911673728aaa46815b8106b72edd6e73fedf2233d3e29c1790556362304e906009556362c8e510600a553480156200006e57600080fd5b506040516200325c3803806200325c8339810160408190526200009191620001cb565b81816200009e81620000ba565b50620000aa33620000d3565b6004555050600160055562000302565b8051620000cf90600290602084019062000125565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200013390620002af565b90600052602060002090601f016020900481019282620001575760008555620001a2565b82601f106200017257805160ff1916838001178555620001a2565b82800160010185558215620001a2579182015b82811115620001a257825182559160200191906001019062000185565b50620001b0929150620001b4565b5090565b5b80821115620001b05760008155600101620001b5565b60008060408385031215620001de578182fd5b8251602080850151919350906001600160401b0380821115620001ff578384fd5b818601915086601f83011262000213578384fd5b815181811115620002285762000228620002ec565b604051601f8201601f19908116603f01168101908382118183101715620002535762000253620002ec565b8160405282815289868487010111156200026b578687fd5b8693505b828410156200028e57848401860151818501870152928501926200026f565b828411156200029f57868684830101525b8096505050505050509250929050565b600181811c90821680620002c457607f821691505b60208210811415620002e657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612f4a80620003126000396000f3fe6080604052600436106102195760003560e01c80634401dcfe11610123578063a18116f1116100ab578063e985e9c51161006f578063e985e9c51461060c578063f0558c4014610655578063f242432a14610668578063f2fde38b14610688578063f5aa406d146106a857600080fd5b8063a18116f114610581578063a1dd2c0714610596578063a22cb465146105ac578063ca4b208b146105cc578063d67b06c1146105ec57600080fd5b806365fcfd24116100f257806365fcfd24146104de578063715018a6146104fe5780637ebe626d146105135780638da5cb5b1461053257806395d89b411461055057600080fd5b80634401dcfe1461046b57806345b5a4d81461047e5780634e1273f41461049e5780635b4b5629146104cb57600080fd5b806314c95ddc116101a6578063292fef3711610175578063292fef37146103cc5780632eb2c2d6146103e85780633360caa0146104085780633726b0a21461041e5780633ccfd60b1461045657600080fd5b806314c95ddc1461036657806318160ddd146103825780631f0234d814610398578063267e91fa146103ad57600080fd5b80630af12243116101ed5780630af12243146102e55780630ca282f7146102f85780630d5624b3146103185780630e89341c1461032e5780630fcf2e751461034e57600080fd5b8062fdd58e1461021e57806301ffc9a71461025157806302fe53051461028157806306fdde03146102a3575b600080fd5b34801561022a57600080fd5b5061023e610239366004612981565b6106c8565b6040519081526020015b60405180910390f35b34801561025d57600080fd5b5061027161026c366004612a7a565b61075f565b6040519015158152602001610248565b34801561028d57600080fd5b506102a161029c366004612ab2565b6107b1565b005b3480156102af57600080fd5b506102d86040518060400160405280600981526020016853686962654661636560b81b81525081565b6040516102489190612cf1565b6102a16102f3366004612a62565b610805565b34801561030457600080fd5b506102a1610313366004612a62565b6108a3565b34801561032457600080fd5b5061023e60095481565b34801561033a57600080fd5b506102d8610349366004612a62565b6108f0565b34801561035a57600080fd5b50600a54421015610271565b34801561037257600080fd5b5061023e670162ea854d0fc00081565b34801561038e57600080fd5b5061023e60065481565b3480156103a457600080fd5b50610271610984565b3480156103b957600080fd5b5061023e6a08459508334a94a29c000081565b3480156103d857600080fd5b5061023e6701140bbd030c400081565b3480156103f457600080fd5b506102a1610403366004612842565b61099f565b34801561041457600080fd5b5061023e600a5481565b34801561042a57600080fd5b5060075461043e906001600160a01b031681565b6040516001600160a01b039091168152602001610248565b34801561046257600080fd5b506102a1610a41565b6102a1610479366004612b10565b610dbf565b34801561048a57600080fd5b506102a16104993660046127f6565b610e24565b3480156104aa57600080fd5b506104be6104b93660046129e5565b610e9b565b6040516102489190612cb0565b6102a16104d9366004612b10565b610ffd565b3480156104ea57600080fd5b506102a16104f9366004612a62565b61109d565b34801561050a57600080fd5b506102a16110ea565b34801561051f57600080fd5b5061023e6a066f0222d28f572924000081565b34801561053e57600080fd5b506003546001600160a01b031661043e565b34801561055c57600080fd5b506102d860405180604001604052806005815260200164534849424560d81b81525081565b34801561058d57600080fd5b5061023e606f81565b3480156105a257600080fd5b5061023e61014d81565b3480156105b857600080fd5b506102a16105c736600461294b565b61113e565b3480156105d857600080fd5b5060085461043e906001600160a01b031681565b3480156105f857600080fd5b506102a16106073660046129aa565b61114d565b34801561061857600080fd5b50610271610627366004612810565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102a1610663366004612a62565b611257565b34801561067457600080fd5b506102a16106833660046128e8565b6112b5565b34801561069457600080fd5b506102a16106a33660046127f6565b61133c565b3480156106b457600080fd5b506102a16106c3366004612a62565b6113f2565b60006001600160a01b0383166107395760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061079057506001600160e01b031982166303a24d0760e21b145b806107ab57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6003546001600160a01b031633146107f95760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b6108028161143f565b50565b6007546040516323b872dd60e01b81523360048201523060248201526a08459508334a94a29c000060448201526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561086157600080fd5b505af1158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190612a46565b5061080281611452565b6003546001600160a01b031633146108eb5760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b600a55565b6060600280546108ff90612d7f565b80601f016020809104026020016040519081016040528092919081815260200182805461092b90612d7f565b80156109785780601f1061094d57610100808354040283529160200191610978565b820191906000526020600020905b81548152906001019060200180831161095b57829003601f168201915b50505050509050919050565b6000426009541115801561099a575042600a5410155b905090565b6001600160a01b0385163314806109bb57506109bb8533610627565b610a2d5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f76656400000000000000000000000000006064820152608401610730565b610a3a858585858561156f565b5050505050565b6003546001600160a01b03163314610a895760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b4780610a9457600080fd5b6008546000906001600160a01b0316610aae600a84612d40565b604051600081818185875af1925050503d8060008114610aea576040519150601f19603f3d011682016040523d82523d6000602084013e610aef565b606091505b5050905080610b4a5760405162461bcd60e51b815260206004820152602160248201527f5472616e7366657220455448206661696c656420746f20646576656c6f7065726044820152601760f91b6064820152608401610730565b600033600a610b5a856009612d60565b610b649190612d40565b604051600081818185875af1925050503d8060008114610ba0576040519150601f19603f3d011682016040523d82523d6000602084013e610ba5565b606091505b5050905080610bf65760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657220455448206661696c656420746f206f776e65722e0000006044820152606401610730565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610c3a57600080fd5b505afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c729190612af8565b6007546008549192506001600160a01b039081169163a9059cbb9116610c99600a85612d40565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610cdf57600080fd5b505af1158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190612a46565b506007546001600160a01b031663a9059cbb33600a610d37856009612d60565b610d419190612d40565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610d8757600080fd5b505af1158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a9190612a46565b610dd1836701140bbd030c4000612d60565b341015610e145760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b41032ba3432b91760791b6044820152606401610730565b610e1f8383836117e9565b505050565b6003546001600160a01b03163314610e6c5760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60608151835114610f005760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610730565b6000835167ffffffffffffffff811115610f2a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f53578160200160208202803683370190505b50905060005b8451811015610ff557610fba858281518110610f8557634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610fad57634e487b7160e01b600052603260045260246000fd5b60200260200101516106c8565b828281518110610fda57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610fee81612de7565b9050610f59565b509392505050565b6007546040516323b872dd60e01b81523360048201523060248201526a066f0222d28f572924000060448201526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561105957600080fd5b505af115801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110919190612a46565b50610e1f8383836117e9565b6003546001600160a01b031633146110e55760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b600955565b6003546001600160a01b031633146111325760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b61113c6000611a8e565b565b611149338383611aed565b5050565b6003546001600160a01b031633146111955760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b61014d81516006546111a79190612d28565b11156112075760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b6064820152608401610730565b60005b81518110156111495761124582828151811061123657634e487b7160e01b600052603260045260246000fd5b60200260200101516001611bce565b8061124f81612de7565b91505061120a565b61126981670162ea854d0fc000612d60565b3410156112ac5760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b41032ba3432b91760791b6044820152606401610730565b61080281611452565b6001600160a01b0385163314806112d157506112d18533610627565b61132f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610730565b610a3a8585858585611d61565b6003546001600160a01b031633146113845760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b6001600160a01b0381166113e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610730565b61080281611a8e565b6003546001600160a01b0316331461143a5760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b600455565b80516111499060029060208401906125e2565b600a544210156114a45760405162461bcd60e51b815260206004820152601a60248201527f5075626c69632073616c65206973206e6f74206163746976652e0000000000006044820152606401610730565b600081116114f45760405162461bcd60e51b815260206004820152601d60248201527f436f756e74206d7573742062652067726561746572207468616e20302e0000006044820152606401610730565b61014d816006546115059190612d28565b11156115655760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b6064820152608401610730565b6108023382611bce565b81518351146115d15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610730565b6001600160a01b0384166116355760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610730565b3360005b845181101561177b57600085828151811061166457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061169057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156117235760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610730565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611760908490612d28565b925050819055505050508061177490612de7565b9050611639565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117cb929190612cc3565b60405180910390a46117e1818787878787611f08565b505050505050565b6002600554141561183c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610730565b6002600555611849610984565b6118955760405162461bcd60e51b815260206004820152601760248201527f5072652d73616c65206973206e6f74206163746976652e0000000000000000006044820152606401610730565b336000908152600b602052604090205460ff16156118f55760405162461bcd60e51b815260206004820152601060248201527f416c726561647920636c61696d65642e000000000000000000000000000000006044820152606401610730565b604080513360601b6bffffffffffffffffffffffff19166020808301919091528251601481840301815260349092019092528051910120611969908383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506120bd92505050565b61199f5760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606401610730565b600083116119ef5760405162461bcd60e51b815260206004820152601d60248201527f436f756e74206d7573742062652067726561746572207468616e20302e0000006044820152606401610730565b606f836006546119ff9190612d28565b1115611a5f5760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b6064820152608401610730565b611a693384611bce565b5050336000908152600b60205260409020805460ff1916600190811790915560055550565b600380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415611b615760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610730565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001811115611d285760008167ffffffffffffffff811115611c0057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c29578160200160208202803683370190505b50905060008267ffffffffffffffff811115611c5557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c7e578160200160208202803683370190505b50905060005b83811015611d055780600654611c9a9190612d28565b838281518110611cba57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001828281518110611ce857634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611cfd81612de7565b915050611c84565b50611d21848383604051806020016040528060008152506120d3565b5050611d46565b611d46826006546001604051806020016040528060008152506122b5565b8060066000828254611d589190612d28565b90915550505050565b6001600160a01b038416611dc55760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610730565b33611dde818787611dd5886123b6565b610a3a886123b6565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611e625760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610730565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611e9f908490612d28565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611eff82888888888861240f565b50505050505050565b6001600160a01b0384163b156117e15760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611f4c9089908990889088908890600401612c0f565b602060405180830381600087803b158015611f6657600080fd5b505af1925050508015611f96575060408051601f3d908101601f19168201909252611f9391810190612a96565b60015b61204c57611fa2612e2e565b806308c379a01415611fdc5750611fb7612e46565b80611fc25750611fde565b8060405162461bcd60e51b81526004016107309190612cf1565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610730565b6001600160e01b0319811663bc197c8160e01b14611eff5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610730565b60006120cc826004548561251a565b9392505050565b6001600160a01b0384166121335760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610730565b81518351146121955760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610730565b3360005b845181101561224d578381815181106121c257634e487b7160e01b600052603260045260246000fd5b60200260200101516000808784815181106121ed57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546122359190612d28565b9091555081905061224581612de7565b915050612199565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161229e929190612cc3565b60405180910390a4610a3a81600087878787611f08565b6001600160a01b0384166123155760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610730565b3361232681600087611dd5886123b6565b6000848152602081815260408083206001600160a01b038916845290915281208054859290612356908490612d28565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610a3a8160008787878761240f565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106123fe57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156117e15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906124539089908990889088908890600401612c6d565b602060405180830381600087803b15801561246d57600080fd5b505af192505050801561249d575060408051601f3d908101601f1916820190925261249a91810190612a96565b60015b6124a957611fa2612e2e565b6001600160e01b0319811663f23a6e6160e01b14611eff5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610730565b6000826125278584612530565b14949350505050565b600081815b8451811015610ff557600085828151811061256057634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116125a25760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506125cf565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806125da81612de7565b915050612535565b8280546125ee90612d7f565b90600052602060002090601f0160209004810192826126105760008555612656565b82601f1061262957805160ff1916838001178555612656565b82800160010185558215612656579182015b8281111561265657825182559160200191906001019061263b565b50612662929150612666565b5090565b5b808211156126625760008155600101612667565b600067ffffffffffffffff83111561269557612695612e18565b6040516126ac601f8501601f191660200182612dba565b8091508381528484840111156126c157600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146126f057600080fd5b919050565b600082601f830112612705578081fd5b8135602061271282612d04565b60405161271f8282612dba565b8381528281019150858301600585901b8701840188101561273e578586fd5b855b8581101561276357612751826126d9565b84529284019290840190600101612740565b5090979650505050505050565b600082601f830112612780578081fd5b8135602061278d82612d04565b60405161279a8282612dba565b8381528281019150858301600585901b870184018810156127b9578586fd5b855b85811015612763578135845292840192908401906001016127bb565b600082601f8301126127e7578081fd5b6120cc8383356020850161267b565b600060208284031215612807578081fd5b6120cc826126d9565b60008060408385031215612822578081fd5b61282b836126d9565b9150612839602084016126d9565b90509250929050565b600080600080600060a08688031215612859578081fd5b612862866126d9565b9450612870602087016126d9565b9350604086013567ffffffffffffffff8082111561288c578283fd5b61289889838a01612770565b945060608801359150808211156128ad578283fd5b6128b989838a01612770565b935060808801359150808211156128ce578283fd5b506128db888289016127d7565b9150509295509295909350565b600080600080600060a086880312156128ff578081fd5b612908866126d9565b9450612916602087016126d9565b93506040860135925060608601359150608086013567ffffffffffffffff81111561293f578182fd5b6128db888289016127d7565b6000806040838503121561295d578182fd5b612966836126d9565b9150602083013561297681612ed0565b809150509250929050565b60008060408385031215612993578182fd5b61299c836126d9565b946020939093013593505050565b6000602082840312156129bb578081fd5b813567ffffffffffffffff8111156129d1578182fd5b6129dd848285016126f5565b949350505050565b600080604083850312156129f7578182fd5b823567ffffffffffffffff80821115612a0e578384fd5b612a1a868387016126f5565b93506020850135915080821115612a2f578283fd5b50612a3c85828601612770565b9150509250929050565b600060208284031215612a57578081fd5b81516120cc81612ed0565b600060208284031215612a73578081fd5b5035919050565b600060208284031215612a8b578081fd5b81356120cc81612ede565b600060208284031215612aa7578081fd5b81516120cc81612ede565b600060208284031215612ac3578081fd5b813567ffffffffffffffff811115612ad9578182fd5b8201601f81018413612ae9578182fd5b6129dd8482356020840161267b565b600060208284031215612b09578081fd5b5051919050565b600080600060408486031215612b24578081fd5b83359250602084013567ffffffffffffffff80821115612b42578283fd5b818601915086601f830112612b55578283fd5b813581811115612b63578384fd5b8760208260051b8501011115612b77578384fd5b6020830194508093505050509250925092565b6000815180845260208085019450808401835b83811015612bb957815187529582019590820190600101612b9d565b509495945050505050565b60008151808452815b81811015612be957602081850181015186830182015201612bcd565b81811115612bfa5782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152612c3b60a0830186612b8a565b8281036060840152612c4d8186612b8a565b90508281036080840152612c618185612bc4565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612ca560a0830184612bc4565b979650505050505050565b6020815260006120cc6020830184612b8a565b604081526000612cd66040830185612b8a565b8281036020840152612ce88185612b8a565b95945050505050565b6020815260006120cc6020830184612bc4565b600067ffffffffffffffff821115612d1e57612d1e612e18565b5060051b60200190565b60008219821115612d3b57612d3b612e02565b500190565b600082612d5b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d7a57612d7a612e02565b500290565b600181811c90821680612d9357607f821691505b60208210811415612db457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715612de057612de0612e18565b6040525050565b6000600019821415612dfb57612dfb612e02565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612e4357600481823e5160e01c5b90565b600060443d1015612e545790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612e8457505050505090565b8285019150815181811115612e9c5750505050505090565b843d8701016020828501011115612eb65750505050505090565b612ec560208286010187612dba565b509095945050505050565b801515811461080257600080fd5b6001600160e01b03198116811461080257600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220f46cc6fdd7163eaa505f931641a1e84e2741d7495e068f0e054f5866d11e50da64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102195760003560e01c80634401dcfe11610123578063a18116f1116100ab578063e985e9c51161006f578063e985e9c51461060c578063f0558c4014610655578063f242432a14610668578063f2fde38b14610688578063f5aa406d146106a857600080fd5b8063a18116f114610581578063a1dd2c0714610596578063a22cb465146105ac578063ca4b208b146105cc578063d67b06c1146105ec57600080fd5b806365fcfd24116100f257806365fcfd24146104de578063715018a6146104fe5780637ebe626d146105135780638da5cb5b1461053257806395d89b411461055057600080fd5b80634401dcfe1461046b57806345b5a4d81461047e5780634e1273f41461049e5780635b4b5629146104cb57600080fd5b806314c95ddc116101a6578063292fef3711610175578063292fef37146103cc5780632eb2c2d6146103e85780633360caa0146104085780633726b0a21461041e5780633ccfd60b1461045657600080fd5b806314c95ddc1461036657806318160ddd146103825780631f0234d814610398578063267e91fa146103ad57600080fd5b80630af12243116101ed5780630af12243146102e55780630ca282f7146102f85780630d5624b3146103185780630e89341c1461032e5780630fcf2e751461034e57600080fd5b8062fdd58e1461021e57806301ffc9a71461025157806302fe53051461028157806306fdde03146102a3575b600080fd5b34801561022a57600080fd5b5061023e610239366004612981565b6106c8565b6040519081526020015b60405180910390f35b34801561025d57600080fd5b5061027161026c366004612a7a565b61075f565b6040519015158152602001610248565b34801561028d57600080fd5b506102a161029c366004612ab2565b6107b1565b005b3480156102af57600080fd5b506102d86040518060400160405280600981526020016853686962654661636560b81b81525081565b6040516102489190612cf1565b6102a16102f3366004612a62565b610805565b34801561030457600080fd5b506102a1610313366004612a62565b6108a3565b34801561032457600080fd5b5061023e60095481565b34801561033a57600080fd5b506102d8610349366004612a62565b6108f0565b34801561035a57600080fd5b50600a54421015610271565b34801561037257600080fd5b5061023e670162ea854d0fc00081565b34801561038e57600080fd5b5061023e60065481565b3480156103a457600080fd5b50610271610984565b3480156103b957600080fd5b5061023e6a08459508334a94a29c000081565b3480156103d857600080fd5b5061023e6701140bbd030c400081565b3480156103f457600080fd5b506102a1610403366004612842565b61099f565b34801561041457600080fd5b5061023e600a5481565b34801561042a57600080fd5b5060075461043e906001600160a01b031681565b6040516001600160a01b039091168152602001610248565b34801561046257600080fd5b506102a1610a41565b6102a1610479366004612b10565b610dbf565b34801561048a57600080fd5b506102a16104993660046127f6565b610e24565b3480156104aa57600080fd5b506104be6104b93660046129e5565b610e9b565b6040516102489190612cb0565b6102a16104d9366004612b10565b610ffd565b3480156104ea57600080fd5b506102a16104f9366004612a62565b61109d565b34801561050a57600080fd5b506102a16110ea565b34801561051f57600080fd5b5061023e6a066f0222d28f572924000081565b34801561053e57600080fd5b506003546001600160a01b031661043e565b34801561055c57600080fd5b506102d860405180604001604052806005815260200164534849424560d81b81525081565b34801561058d57600080fd5b5061023e606f81565b3480156105a257600080fd5b5061023e61014d81565b3480156105b857600080fd5b506102a16105c736600461294b565b61113e565b3480156105d857600080fd5b5060085461043e906001600160a01b031681565b3480156105f857600080fd5b506102a16106073660046129aa565b61114d565b34801561061857600080fd5b50610271610627366004612810565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6102a1610663366004612a62565b611257565b34801561067457600080fd5b506102a16106833660046128e8565b6112b5565b34801561069457600080fd5b506102a16106a33660046127f6565b61133c565b3480156106b457600080fd5b506102a16106c3366004612a62565b6113f2565b60006001600160a01b0383166107395760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061079057506001600160e01b031982166303a24d0760e21b145b806107ab57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6003546001600160a01b031633146107f95760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b6108028161143f565b50565b6007546040516323b872dd60e01b81523360048201523060248201526a08459508334a94a29c000060448201526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561086157600080fd5b505af1158015610875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108999190612a46565b5061080281611452565b6003546001600160a01b031633146108eb5760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b600a55565b6060600280546108ff90612d7f565b80601f016020809104026020016040519081016040528092919081815260200182805461092b90612d7f565b80156109785780601f1061094d57610100808354040283529160200191610978565b820191906000526020600020905b81548152906001019060200180831161095b57829003601f168201915b50505050509050919050565b6000426009541115801561099a575042600a5410155b905090565b6001600160a01b0385163314806109bb57506109bb8533610627565b610a2d5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f76656400000000000000000000000000006064820152608401610730565b610a3a858585858561156f565b5050505050565b6003546001600160a01b03163314610a895760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b4780610a9457600080fd5b6008546000906001600160a01b0316610aae600a84612d40565b604051600081818185875af1925050503d8060008114610aea576040519150601f19603f3d011682016040523d82523d6000602084013e610aef565b606091505b5050905080610b4a5760405162461bcd60e51b815260206004820152602160248201527f5472616e7366657220455448206661696c656420746f20646576656c6f7065726044820152601760f91b6064820152608401610730565b600033600a610b5a856009612d60565b610b649190612d40565b604051600081818185875af1925050503d8060008114610ba0576040519150601f19603f3d011682016040523d82523d6000602084013e610ba5565b606091505b5050905080610bf65760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657220455448206661696c656420746f206f776e65722e0000006044820152606401610730565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610c3a57600080fd5b505afa158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c729190612af8565b6007546008549192506001600160a01b039081169163a9059cbb9116610c99600a85612d40565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610cdf57600080fd5b505af1158015610cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d179190612a46565b506007546001600160a01b031663a9059cbb33600a610d37856009612d60565b610d419190612d40565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610d8757600080fd5b505af1158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a9190612a46565b610dd1836701140bbd030c4000612d60565b341015610e145760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b41032ba3432b91760791b6044820152606401610730565b610e1f8383836117e9565b505050565b6003546001600160a01b03163314610e6c5760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60608151835114610f005760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610730565b6000835167ffffffffffffffff811115610f2a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f53578160200160208202803683370190505b50905060005b8451811015610ff557610fba858281518110610f8557634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610fad57634e487b7160e01b600052603260045260246000fd5b60200260200101516106c8565b828281518110610fda57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610fee81612de7565b9050610f59565b509392505050565b6007546040516323b872dd60e01b81523360048201523060248201526a066f0222d28f572924000060448201526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561105957600080fd5b505af115801561106d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110919190612a46565b50610e1f8383836117e9565b6003546001600160a01b031633146110e55760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b600955565b6003546001600160a01b031633146111325760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b61113c6000611a8e565b565b611149338383611aed565b5050565b6003546001600160a01b031633146111955760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b61014d81516006546111a79190612d28565b11156112075760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b6064820152608401610730565b60005b81518110156111495761124582828151811061123657634e487b7160e01b600052603260045260246000fd5b60200260200101516001611bce565b8061124f81612de7565b91505061120a565b61126981670162ea854d0fc000612d60565b3410156112ac5760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b41032ba3432b91760791b6044820152606401610730565b61080281611452565b6001600160a01b0385163314806112d157506112d18533610627565b61132f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610730565b610a3a8585858585611d61565b6003546001600160a01b031633146113845760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b6001600160a01b0381166113e95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610730565b61080281611a8e565b6003546001600160a01b0316331461143a5760405162461bcd60e51b81526020600482018190526024820152600080516020612ef58339815191526044820152606401610730565b600455565b80516111499060029060208401906125e2565b600a544210156114a45760405162461bcd60e51b815260206004820152601a60248201527f5075626c69632073616c65206973206e6f74206163746976652e0000000000006044820152606401610730565b600081116114f45760405162461bcd60e51b815260206004820152601d60248201527f436f756e74206d7573742062652067726561746572207468616e20302e0000006044820152606401610730565b61014d816006546115059190612d28565b11156115655760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b6064820152608401610730565b6108023382611bce565b81518351146115d15760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610730565b6001600160a01b0384166116355760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610730565b3360005b845181101561177b57600085828151811061166457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061169057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156117235760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610730565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611760908490612d28565b925050819055505050508061177490612de7565b9050611639565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516117cb929190612cc3565b60405180910390a46117e1818787878787611f08565b505050505050565b6002600554141561183c5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610730565b6002600555611849610984565b6118955760405162461bcd60e51b815260206004820152601760248201527f5072652d73616c65206973206e6f74206163746976652e0000000000000000006044820152606401610730565b336000908152600b602052604090205460ff16156118f55760405162461bcd60e51b815260206004820152601060248201527f416c726561647920636c61696d65642e000000000000000000000000000000006044820152606401610730565b604080513360601b6bffffffffffffffffffffffff19166020808301919091528251601481840301815260349092019092528051910120611969908383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506120bd92505050565b61199f5760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b6044820152606401610730565b600083116119ef5760405162461bcd60e51b815260206004820152601d60248201527f436f756e74206d7573742062652067726561746572207468616e20302e0000006044820152606401610730565b606f836006546119ff9190612d28565b1115611a5f5760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b6064820152608401610730565b611a693384611bce565b5050336000908152600b60205260409020805460ff1916600190811790915560055550565b600380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415611b615760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610730565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001811115611d285760008167ffffffffffffffff811115611c0057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c29578160200160208202803683370190505b50905060008267ffffffffffffffff811115611c5557634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611c7e578160200160208202803683370190505b50905060005b83811015611d055780600654611c9a9190612d28565b838281518110611cba57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001828281518110611ce857634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611cfd81612de7565b915050611c84565b50611d21848383604051806020016040528060008152506120d3565b5050611d46565b611d46826006546001604051806020016040528060008152506122b5565b8060066000828254611d589190612d28565b90915550505050565b6001600160a01b038416611dc55760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610730565b33611dde818787611dd5886123b6565b610a3a886123b6565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611e625760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610730565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611e9f908490612d28565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611eff82888888888861240f565b50505050505050565b6001600160a01b0384163b156117e15760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611f4c9089908990889088908890600401612c0f565b602060405180830381600087803b158015611f6657600080fd5b505af1925050508015611f96575060408051601f3d908101601f19168201909252611f9391810190612a96565b60015b61204c57611fa2612e2e565b806308c379a01415611fdc5750611fb7612e46565b80611fc25750611fde565b8060405162461bcd60e51b81526004016107309190612cf1565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610730565b6001600160e01b0319811663bc197c8160e01b14611eff5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610730565b60006120cc826004548561251a565b9392505050565b6001600160a01b0384166121335760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610730565b81518351146121955760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610730565b3360005b845181101561224d578381815181106121c257634e487b7160e01b600052603260045260246000fd5b60200260200101516000808784815181106121ed57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546122359190612d28565b9091555081905061224581612de7565b915050612199565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161229e929190612cc3565b60405180910390a4610a3a81600087878787611f08565b6001600160a01b0384166123155760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610730565b3361232681600087611dd5886123b6565b6000848152602081815260408083206001600160a01b038916845290915281208054859290612356908490612d28565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610a3a8160008787878761240f565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106123fe57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156117e15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906124539089908990889088908890600401612c6d565b602060405180830381600087803b15801561246d57600080fd5b505af192505050801561249d575060408051601f3d908101601f1916820190925261249a91810190612a96565b60015b6124a957611fa2612e2e565b6001600160e01b0319811663f23a6e6160e01b14611eff5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610730565b6000826125278584612530565b14949350505050565b600081815b8451811015610ff557600085828151811061256057634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116125a25760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506125cf565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806125da81612de7565b915050612535565b8280546125ee90612d7f565b90600052602060002090601f0160209004810192826126105760008555612656565b82601f1061262957805160ff1916838001178555612656565b82800160010185558215612656579182015b8281111561265657825182559160200191906001019061263b565b50612662929150612666565b5090565b5b808211156126625760008155600101612667565b600067ffffffffffffffff83111561269557612695612e18565b6040516126ac601f8501601f191660200182612dba565b8091508381528484840111156126c157600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146126f057600080fd5b919050565b600082601f830112612705578081fd5b8135602061271282612d04565b60405161271f8282612dba565b8381528281019150858301600585901b8701840188101561273e578586fd5b855b8581101561276357612751826126d9565b84529284019290840190600101612740565b5090979650505050505050565b600082601f830112612780578081fd5b8135602061278d82612d04565b60405161279a8282612dba565b8381528281019150858301600585901b870184018810156127b9578586fd5b855b85811015612763578135845292840192908401906001016127bb565b600082601f8301126127e7578081fd5b6120cc8383356020850161267b565b600060208284031215612807578081fd5b6120cc826126d9565b60008060408385031215612822578081fd5b61282b836126d9565b9150612839602084016126d9565b90509250929050565b600080600080600060a08688031215612859578081fd5b612862866126d9565b9450612870602087016126d9565b9350604086013567ffffffffffffffff8082111561288c578283fd5b61289889838a01612770565b945060608801359150808211156128ad578283fd5b6128b989838a01612770565b935060808801359150808211156128ce578283fd5b506128db888289016127d7565b9150509295509295909350565b600080600080600060a086880312156128ff578081fd5b612908866126d9565b9450612916602087016126d9565b93506040860135925060608601359150608086013567ffffffffffffffff81111561293f578182fd5b6128db888289016127d7565b6000806040838503121561295d578182fd5b612966836126d9565b9150602083013561297681612ed0565b809150509250929050565b60008060408385031215612993578182fd5b61299c836126d9565b946020939093013593505050565b6000602082840312156129bb578081fd5b813567ffffffffffffffff8111156129d1578182fd5b6129dd848285016126f5565b949350505050565b600080604083850312156129f7578182fd5b823567ffffffffffffffff80821115612a0e578384fd5b612a1a868387016126f5565b93506020850135915080821115612a2f578283fd5b50612a3c85828601612770565b9150509250929050565b600060208284031215612a57578081fd5b81516120cc81612ed0565b600060208284031215612a73578081fd5b5035919050565b600060208284031215612a8b578081fd5b81356120cc81612ede565b600060208284031215612aa7578081fd5b81516120cc81612ede565b600060208284031215612ac3578081fd5b813567ffffffffffffffff811115612ad9578182fd5b8201601f81018413612ae9578182fd5b6129dd8482356020840161267b565b600060208284031215612b09578081fd5b5051919050565b600080600060408486031215612b24578081fd5b83359250602084013567ffffffffffffffff80821115612b42578283fd5b818601915086601f830112612b55578283fd5b813581811115612b63578384fd5b8760208260051b8501011115612b77578384fd5b6020830194508093505050509250925092565b6000815180845260208085019450808401835b83811015612bb957815187529582019590820190600101612b9d565b509495945050505050565b60008151808452815b81811015612be957602081850181015186830182015201612bcd565b81811115612bfa5782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152612c3b60a0830186612b8a565b8281036060840152612c4d8186612b8a565b90508281036080840152612c618185612bc4565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612ca560a0830184612bc4565b979650505050505050565b6020815260006120cc6020830184612b8a565b604081526000612cd66040830185612b8a565b8281036020840152612ce88185612b8a565b95945050505050565b6020815260006120cc6020830184612bc4565b600067ffffffffffffffff821115612d1e57612d1e612e18565b5060051b60200190565b60008219821115612d3b57612d3b612e02565b500190565b600082612d5b57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612d7a57612d7a612e02565b500290565b600181811c90821680612d9357607f821691505b60208210811415612db457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff81118282101715612de057612de0612e18565b6040525050565b6000600019821415612dfb57612dfb612e02565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115612e4357600481823e5160e01c5b90565b600060443d1015612e545790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715612e8457505050505090565b8285019150815181811115612e9c5750505050505090565b843d8701016020828501011115612eb65750505050505090565b612ec560208286010187612dba565b509095945050505050565b801515811461080257600080fd5b6001600160e01b03198116811461080257600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220f46cc6fdd7163eaa505f931641a1e84e2741d7495e068f0e054f5866d11e50da64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 170,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 176,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 178,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3853,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "whitelist",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 115,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2667,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2682,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "shib",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2685,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "developer",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2688,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "preSaleStart",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2694,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "publicSaleStart",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2701,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "whitelist",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}