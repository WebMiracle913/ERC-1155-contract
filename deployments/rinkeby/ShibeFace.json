{
  "address": "0x73Ad3E95F28Ef69aDD9b40A47314c9c50C13C96a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_whitelistRoot",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "CreateShib",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "developer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "preSaleMintWithEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        }
      ],
      "name": "preSaleMintWithShib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preSaleStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presalePerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presalePriceInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "presalePriceInShib",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMintWithEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMintWithShib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicsalePerWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicsalePriceInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicsalePriceInShib",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setPreSaleStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setPresaleShibPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setPublicsaleShibPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shib",
          "type": "address"
        }
      ],
      "name": "setShib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "setWhitelistRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shib",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f867abde3c6500a717b7bda8944e5a5230714818c89d623f708dfd1286c8328",
  "receipt": {
    "to": null,
    "from": "0x2c275FD35065EBbCa5682Df7ca95C482383eda24",
    "contractAddress": "0x73Ad3E95F28Ef69aDD9b40A47314c9c50C13C96a",
    "transactionIndex": 27,
    "gasUsed": "3146975",
    "logsBloom": "0x
    "blockHash": "0x613c4cdfb722899b92c7adf13eab9fafe0da32a633b3eb74118a346f8a6064e3",
    "transactionHash": "0x2f867abde3c6500a717b7bda8944e5a5230714818c89d623f708dfd1286c8328",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 10460348,
        "transactionHash": "0x2f867abde3c6500a717b7bda8944e5a5230714818c89d623f708dfd1286c8328",
        "address": "0x73Ad3E95F28Ef69aDD9b40A47314c9c50C13C96a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002c275fd35065ebbca5682df7ca95c482383eda24"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0x613c4cdfb722899b92c7adf13eab9fafe0da32a633b3eb74118a346f8a6064e3"
      }
    ],
    "blockNumber": 10460348,
    "cumulativeGasUsed": "5134308",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa3fa8ecd3a22b3596a752b0c3984fe21c62aa4c8bb4bba2006ef049fb209d429",
    "https://ipfs.io/ipfs/QmQtN81i9eNrD3wxcr67scDpLvZDDXxbmAvNXMaZh3D6tB/"
  ],
  "solcInputHash": "c2e23026eda27a26b3fdfb3836afd7b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_whitelistRoot\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"CreateShib\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"preSaleMintWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"preSaleMintWithShib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preSaleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presalePriceInShib\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"publicSaleMintWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"publicSaleMintWithShib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicsalePerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicsalePriceInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicsalePriceInShib\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPreSaleStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPresaleShibPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPublicsaleShibPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shib\",\"type\":\"address\"}],\"name\":\"setShib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"setWhitelistRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/nft.sol\":\"ShibeFace\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/nft.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2022-01-21\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./utils/Merkle.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n// Dev: 0x01CB52008400316898535ef77d2844746Fdd90e5\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ncontract ShibeFace is ERC1155, Merkle, ReentrancyGuard {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    string public constant name = \\\"ShibeFace\\\";\\r\\n    string public constant symbol = \\\"SHIBE\\\";\\r\\n\\r\\n    uint256 public totalSupply = 0;\\r\\n    uint256 public constant presalePerWallet = 2;\\r\\n    uint256 public constant publicsalePerWallet = 12;\\r\\n    uint256 public constant presalePriceInEth = 0.0777 ether;\\r\\n    uint256 public constant publicsalePriceInEth = 0.0999 ether;\\r\\n    uint256 public presalePriceInShib = 7777777 ether;\\r\\n    uint256 public publicsalePriceInShib = 9999999 ether;\\r\\n\\r\\n    address public shib = 0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE;\\r\\n    address public developer = 0x01CB52008400316898535ef77d2844746Fdd90e5;\\r\\n\\r\\n    uint256 public preSaleStart = 1647333008;\\r\\n    uint256 public constant preSaleMaxSupply = 111;\\r\\n\\r\\n    uint256 public publicSaleStart = 1657333008;\\r\\n    uint256 public constant publicSaleMaxSupply = 444;\\r\\n\\r\\n    mapping(address => uint256) whitelist;\\r\\n    mapping(address => uint256) publiclist;\\r\\n\\r\\n    event CreateShib(address indexed from, uint256 tokenId);\\r\\n\\r\\n    constructor(bytes32 _whitelistRoot, string memory uri)\\r\\n        Merkle(_whitelistRoot)\\r\\n        ERC1155(uri)\\r\\n    {}\\r\\n\\r\\n    function setShib(address _shib) external onlyOwner {\\r\\n        shib = _shib;\\r\\n    }\\r\\n\\r\\n    function setURI(string memory uri) public onlyOwner {\\r\\n        _setURI(uri);\\r\\n    }\\r\\n\\r\\n    function setPreSaleStart(uint256 timestamp) public onlyOwner {\\r\\n        preSaleStart = timestamp;\\r\\n    }\\r\\n\\r\\n    function setPublicSaleStart(uint256 timestamp) public onlyOwner {\\r\\n        publicSaleStart = timestamp;\\r\\n    }\\r\\n\\r\\n    function preSaleIsActive() public view returns (bool) {\\r\\n        return\\r\\n            preSaleStart <= block.timestamp &&\\r\\n            publicSaleStart >= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function publicSaleIsActive() public view returns (bool) {\\r\\n        return publicSaleStart <= block.timestamp;\\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 count) internal {\\r\\n        if (count > 1) {\\r\\n            uint256[] memory ids = new uint256[](uint256(count));\\r\\n            uint256[] memory amounts = new uint256[](uint256(count));\\r\\n\\r\\n            for (uint256 i = 0; i < count; i++) {\\r\\n                ids[i] = totalSupply + i;\\r\\n                amounts[i] = 1;\\r\\n            }\\r\\n\\r\\n            _mintBatch(to, ids, amounts, \\\"\\\");\\r\\n\\r\\n            for (uint256 i = 0; i < count; i++) {\\r\\n                emit CreateShib(to, totalSupply + i);\\r\\n            }\\r\\n        } else {\\r\\n            _mint(to, totalSupply, 1, \\\"\\\");\\r\\n            emit CreateShib(to, totalSupply);\\r\\n        }\\r\\n\\r\\n        totalSupply += count;\\r\\n    }\\r\\n\\r\\n    function preSaleMint(uint256 count, bytes32[] calldata proof)\\r\\n        internal\\r\\n        nonReentrant\\r\\n    {\\r\\n        require(preSaleIsActive(), \\\"Pre-sale is not active.\\\");\\r\\n        require(\\r\\n            whitelist[msg.sender] + count <= presalePerWallet,\\r\\n            \\\"Can not exceed amount per wallet in presale.\\\"\\r\\n        );\\r\\n        require(\\r\\n            _whitelistVerify(\\r\\n                _whitelistLeaf(\\r\\n                    msg.sender /*, tokenId*/\\r\\n                ),\\r\\n                proof\\r\\n            ),\\r\\n            \\\"Invalid\\\"\\r\\n        );\\r\\n        require(\\r\\n            totalSupply < preSaleMaxSupply,\\r\\n            \\\"Count exceeds the maximum allowed supply.\\\"\\r\\n        );\\r\\n\\r\\n        mint(msg.sender, count);\\r\\n        whitelist[msg.sender] += count;\\r\\n    }\\r\\n\\r\\n    function preSaleMintWithEth(uint256 count, bytes32[] calldata proof)\\r\\n        external\\r\\n        payable\\r\\n    {\\r\\n        require(msg.value >= presalePriceInEth.mul(count), \\\"Not enough ether.\\\");\\r\\n        preSaleMint(count, proof);\\r\\n    }\\r\\n\\r\\n    function preSaleMintWithShib(uint256 count, bytes32[] calldata proof)\\r\\n        external\\r\\n    {\\r\\n        IERC20(shib).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            presalePriceInShib.mul(count)\\r\\n        );\\r\\n        preSaleMint(count, proof);\\r\\n    }\\r\\n\\r\\n    function publicSaleMint(uint256 count) internal nonReentrant {\\r\\n        require(publicSaleIsActive(), \\\"Public sale is not active.\\\");\\r\\n        require(count > 0, \\\"Count must be greater than 0.\\\");\\r\\n        require(\\r\\n            publiclist[msg.sender] + count <= publicsalePerWallet,\\r\\n            \\\"Can not exceed amount per wallet in public sale.\\\"\\r\\n        );\\r\\n        require(\\r\\n            totalSupply + count <= publicSaleMaxSupply,\\r\\n            \\\"Count exceeds the maximum allowed supply.\\\"\\r\\n        );\\r\\n\\r\\n        mint(msg.sender, count);\\r\\n        publiclist[msg.sender] += count;\\r\\n    }\\r\\n\\r\\n    function publicSaleMintWithEth(uint256 count) external payable {\\r\\n        require(\\r\\n            msg.value >= publicsalePriceInEth.mul(count),\\r\\n            \\\"Not enough ether.\\\"\\r\\n        );\\r\\n        publicSaleMint(count);\\r\\n    }\\r\\n\\r\\n    function publicSaleMintWithShib(uint256 count) external {\\r\\n        IERC20(shib).transferFrom(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            publicsalePriceInShib.mul(count)\\r\\n        );\\r\\n        publicSaleMint(count);\\r\\n    }\\r\\n\\r\\n    function setPresaleShibPrice(uint256 price) external onlyOwner {\\r\\n        presalePriceInShib = price;\\r\\n    }\\r\\n\\r\\n    function setPublicsaleShibPrice(uint256 price) external onlyOwner {\\r\\n        publicsalePriceInShib = price;\\r\\n    }\\r\\n\\r\\n    function batchMint(address[] memory addresses) external onlyOwner {\\r\\n        require(\\r\\n            totalSupply + addresses.length <= publicSaleMaxSupply,\\r\\n            \\\"Count exceeds the maximum allowed supply.\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            mint(addresses[i], 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdraw() external onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0);\\r\\n        (bool dev, ) = developer.call{value: balance / 10}(\\\"\\\");\\r\\n        require(dev, \\\"Transfer ETH failed to developer.\\\");\\r\\n        (bool success, ) = msg.sender.call{value: (balance * 9) / 10}(\\\"\\\");\\r\\n        require(success, \\\"Transfer ETH failed to owner.\\\");\\r\\n\\r\\n        uint256 balanceShib = IERC20(shib).balanceOf(address(this));\\r\\n        IERC20(shib).transfer(developer, balanceShib / 10);\\r\\n        IERC20(shib).transfer(msg.sender, (balanceShib * 9) / 10);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc6655557067aa69aceece0e3d44072f1de1f997867ce54053864940bf8f8f183\",\"license\":\"MIT\"},\"contracts/utils/Merkle.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Merkle is Ownable {\\r\\n    bytes32 private whitelist;\\r\\n\\r\\n    constructor(bytes32 _whitelist) {\\r\\n        whitelist = _whitelist;\\r\\n    }\\r\\n\\r\\n    function _whitelistLeaf(\\r\\n        address account /*, uint256 tokenId*/\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    /*tokenId,*/\\r\\n                    account\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function _whitelistVerify(bytes32 leaf, bytes32[] memory proof)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        return MerkleProof.verify(proof, whitelist, leaf);\\r\\n    }\\r\\n\\r\\n    function setWhitelistRoot(bytes32 _root) external onlyOwner {\\r\\n        whitelist = _root;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xce70eb73bc06353554173b60dcd8420bea2b18075e741a359a265e532c03fd96\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405260006006556a066f0222d28f57292400006007556a08459508334a94a29c0000600855600980546001600160a01b03199081167395ad61b0a150d79219dcf64e1e6cc01f0b64c4ce17909155600a80549091167301cb52008400316898535ef77d2844746fdd90e51790556362304e90600b556362c8e510600c553480156200008c57600080fd5b506040516200359b3803806200359b833981016040819052620000af91620001e9565b8181620000bc81620000d8565b50620000c833620000f1565b6004555050600160055562000320565b8051620000ed90600290602084019062000143565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200015190620002cd565b90600052602060002090601f016020900481019282620001755760008555620001c0565b82601f106200019057805160ff1916838001178555620001c0565b82800160010185558215620001c0579182015b82811115620001c0578251825591602001919060010190620001a3565b50620001ce929150620001d2565b5090565b5b80821115620001ce5760008155600101620001d3565b60008060408385031215620001fc578182fd5b8251602080850151919350906001600160401b03808211156200021d578384fd5b818601915086601f83011262000231578384fd5b8151818111156200024657620002466200030a565b604051601f8201601f19908116603f011681019083821181831017156200027157620002716200030a565b81604052828152898684870101111562000289578687fd5b8693505b82841015620002ac57848401860151818501870152928501926200028d565b82841115620002bd57868684830101525b8096505050505050509250929050565b600181811c90821680620002e257607f821691505b602082108114156200030457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61326b80620003306000396000f3fe6080604052600436106102555760003560e01c80634e1273f411610149578063a22cb465116100c6578063eb817ebb1161008a578063f2fde38b11610064578063f2fde38b14610716578063f5aa406d14610736578063faa6d8d01461075657600080fd5b8063eb817ebb146106ce578063f0558c40146106e3578063f242432a146106f657600080fd5b8063a22cb46514610605578063ca4b208b14610625578063cbfbce2d14610645578063d67b06c114610665578063e985e9c51461068557600080fd5b80638cf1d5631161010d5780638cf1d563146105765780638da5cb5b1461058b57806395d89b41146105a9578063a18116f1146105da578063a1dd2c07146105ef57600080fd5b80634e1273f4146104de5780635b4b56291461050b57806365fcfd241461052b578063715018a61461054b5780637ebe626d1461056057600080fd5b806318160ddd116101d75780633360caa01161019b5780633360caa0146104485780633726b0a21461045e5780633ccfd60b146104965780634401dcfe146104ab57806345b5a4d8146104be57600080fd5b806318160ddd146103cb5780631f0234d8146103e1578063267e91fa146103f6578063292fef371461040c5780632eb2c2d61461042857600080fd5b80630ca282f71161021e5780630ca282f7146103415780630d5624b3146103615780630e89341c146103775780630fcf2e751461039757806314c95ddc146103af57600080fd5b8062fdd58e1461025a57806301ffc9a71461028d57806302fe5305146102bd57806306fdde03146102df5780630af1224314610321575b600080fd5b34801561026657600080fd5b5061027a610275366004612ca2565b610776565b6040519081526020015b60405180910390f35b34801561029957600080fd5b506102ad6102a8366004612d9b565b61080d565b6040519015158152602001610284565b3480156102c957600080fd5b506102dd6102d8366004612dd3565b61085f565b005b3480156102eb57600080fd5b506103146040518060400160405280600981526020016853686962654661636560b81b81525081565b6040516102849190613012565b34801561032d57600080fd5b506102dd61033c366004612d83565b6108b3565b34801561034d57600080fd5b506102dd61035c366004612d83565b61096a565b34801561036d57600080fd5b5061027a600b5481565b34801561038357600080fd5b50610314610392366004612d83565b6109b7565b3480156103a357600080fd5b50600c544210156102ad565b3480156103bb57600080fd5b5061027a670162ea854d0fc00081565b3480156103d757600080fd5b5061027a60065481565b3480156103ed57600080fd5b506102ad610a4b565b34801561040257600080fd5b5061027a60085481565b34801561041857600080fd5b5061027a6701140bbd030c400081565b34801561043457600080fd5b506102dd610443366004612b63565b610a66565b34801561045457600080fd5b5061027a600c5481565b34801561046a57600080fd5b5060095461047e906001600160a01b031681565b6040516001600160a01b039091168152602001610284565b3480156104a257600080fd5b506102dd610b08565b6102dd6104b9366004612e31565b610e8f565b3480156104ca57600080fd5b506102dd6104d9366004612b17565b610ef4565b3480156104ea57600080fd5b506104fe6104f9366004612d06565b610f6b565b6040516102849190612fd1565b34801561051757600080fd5b506102dd610526366004612e31565b6110cd565b34801561053757600080fd5b506102dd610546366004612d83565b611186565b34801561055757600080fd5b506102dd6111d3565b34801561056c57600080fd5b5061027a60075481565b34801561058257600080fd5b5061027a600c81565b34801561059757600080fd5b506003546001600160a01b031661047e565b3480156105b557600080fd5b5061031460405180604001604052806005815260200164534849424560d81b81525081565b3480156105e657600080fd5b5061027a606f81565b3480156105fb57600080fd5b5061027a6101bc81565b34801561061157600080fd5b506102dd610620366004612c6c565b611227565b34801561063157600080fd5b50600a5461047e906001600160a01b031681565b34801561065157600080fd5b506102dd610660366004612d83565b611236565b34801561067157600080fd5b506102dd610680366004612ccb565b611283565b34801561069157600080fd5b506102ad6106a0366004612b31565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156106da57600080fd5b5061027a600281565b6102dd6106f1366004612d83565b61138d565b34801561070257600080fd5b506102dd610711366004612c09565b6113eb565b34801561072257600080fd5b506102dd610731366004612b17565b611472565b34801561074257600080fd5b506102dd610751366004612d83565b611528565b34801561076257600080fd5b506102dd610771366004612d83565b611575565b60006001600160a01b0383166107e75760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061083e57506001600160e01b031982166303a24d0760e21b145b8061085957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6003546001600160a01b031633146108a75760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b6108b0816115c2565b50565b6009546008546001600160a01b03909116906323b872dd90339030906108d990866115d5565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561092857600080fd5b505af115801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190612d67565b506108b0816115e8565b6003546001600160a01b031633146109b25760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b600c55565b6060600280546109c6906130a0565b80601f01602080910402602001604051908101604052809291908181526020018280546109f2906130a0565b8015610a3f5780601f10610a1457610100808354040283529160200191610a3f565b820191906000526020600020905b815481529060010190602001808311610a2257829003601f168201915b50505050509050919050565b600042600b5411158015610a61575042600c5410155b905090565b6001600160a01b038516331480610a825750610a8285336106a0565b610af45760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016107de565b610b01858585858561181b565b5050505050565b6003546001600160a01b03163314610b505760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b4780610b5b57600080fd5b600a80546000916001600160a01b0390911690610b789084613061565b604051600081818185875af1925050503d8060008114610bb4576040519150601f19603f3d011682016040523d82523d6000602084013e610bb9565b606091505b5050905080610c145760405162461bcd60e51b815260206004820152602160248201527f5472616e7366657220455448206661696c656420746f20646576656c6f7065726044820152601760f91b60648201526084016107de565b600033600a610c24856009613081565b610c2e9190613061565b604051600081818185875af1925050503d8060008114610c6a576040519150601f19603f3d011682016040523d82523d6000602084013e610c6f565b606091505b5050905080610cc05760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657220455448206661696c656420746f206f776e65722e00000060448201526064016107de565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610d0457600080fd5b505afa158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3c9190612e19565b600954600a80549293506001600160a01b039182169263a9059cbb921690610d649085613061565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190612d67565b50600980546001600160a01b03169063a9059cbb903390600a90610e07908690613081565b610e119190613061565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610e5757600080fd5b505af1158015610e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b019190612d67565b610ea16701140bbd030c4000846115d5565b341015610ee45760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b41032ba3432b91760791b60448201526064016107de565b610eef838383611a95565b505050565b6003546001600160a01b03163314610f3c5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60608151835114610fd05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107de565b6000835167ffffffffffffffff811115610ffa57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611023578160200160208202803683370190505b50905060005b84518110156110c55761108a85828151811061105557634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061107d57634e487b7160e01b600052603260045260246000fd5b6020026020010151610776565b8282815181106110aa57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526110be81613108565b9050611029565b509392505050565b6009546007546001600160a01b03909116906323b872dd90339030906110f390886115d5565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561114257600080fd5b505af1158015611156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117a9190612d67565b50610eef838383611a95565b6003546001600160a01b031633146111ce5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b600b55565b6003546001600160a01b0316331461121b5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b6112256000611d08565b565b611232338383611d67565b5050565b6003546001600160a01b0316331461127e5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b600855565b6003546001600160a01b031633146112cb5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b6101bc81516006546112dd9190613049565b111561133d5760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b60648201526084016107de565b60005b81518110156112325761137b82828151811061136c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001611e48565b8061138581613108565b915050611340565b61139f670162ea854d0fc000826115d5565b3410156113e25760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b41032ba3432b91760791b60448201526064016107de565b6108b0816115e8565b6001600160a01b038516331480611407575061140785336106a0565b6114655760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016107de565b610b018585858585612089565b6003546001600160a01b031633146114ba5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b6001600160a01b03811661151f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107de565b6108b081611d08565b6003546001600160a01b031633146115705760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b600455565b6003546001600160a01b031633146115bd5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b600755565b8051611232906002906020840190612903565b60006115e18284613081565b9392505050565b6002600554141561163b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107de565b6002600555600c544210156116925760405162461bcd60e51b815260206004820152601a60248201527f5075626c69632073616c65206973206e6f74206163746976652e00000000000060448201526064016107de565b600081116116e25760405162461bcd60e51b815260206004820152601d60248201527f436f756e74206d7573742062652067726561746572207468616e20302e00000060448201526064016107de565b336000908152600e6020526040902054600c90611700908390613049565b11156117745760405162461bcd60e51b815260206004820152603060248201527f43616e206e6f742065786365656420616d6f756e74207065722077616c6c657460448201527f20696e207075626c69632073616c652e0000000000000000000000000000000060648201526084016107de565b6101bc816006546117859190613049565b11156117e55760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b60648201526084016107de565b6117ef3382611e48565b336000908152600e60205260408120805483929061180e908490613049565b9091555050600160055550565b815183511461187d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016107de565b6001600160a01b0384166118e15760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016107de565b3360005b8451811015611a2757600085828151811061191057634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061193c57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156119cf5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016107de565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a0c908490613049565b9250508190555050505080611a2090613108565b90506118e5565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a77929190612fe4565b60405180910390a4611a8d818787878787612230565b505050505050565b60026005541415611ae85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107de565b6002600555611af5610a4b565b611b415760405162461bcd60e51b815260206004820152601760248201527f5072652d73616c65206973206e6f74206163746976652e00000000000000000060448201526064016107de565b336000908152600d6020526040902054600290611b5f908590613049565b1115611bc25760405162461bcd60e51b815260206004820152602c60248201527f43616e206e6f742065786365656420616d6f756e74207065722077616c6c657460448201526b1034b710383932b9b0b6329760a11b60648201526084016107de565b604080513360601b6bffffffffffffffffffffffff19166020808301919091528251601481840301815260349092019092528051910120611c36908383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506123e592505050565b611c6c5760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b60448201526064016107de565b606f60065410611cd05760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b60648201526084016107de565b611cda3384611e48565b336000908152600d602052604081208054859290611cf9908490613049565b90915550506001600555505050565b600380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415611ddb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107de565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600181111561200a5760008167ffffffffffffffff811115611e7a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611ea3578160200160208202803683370190505b50905060008267ffffffffffffffff811115611ecf57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611ef8578160200160208202803683370190505b50905060005b83811015611f7f5780600654611f149190613049565b838281518110611f3457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001828281518110611f6257634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611f7781613108565b915050611efe565b50611f9b848383604051806020016040528060008152506123f4565b60005b8381101561200257846001600160a01b03167f018291e2f20a9af0218cbcc910391fef24dc869471986940aab8219e72dd43d882600654611fdf9190613049565b60405190815260200160405180910390a280611ffa81613108565b915050611f9e565b50505061206e565b612028826006546001604051806020016040528060008152506125d6565b816001600160a01b03167f018291e2f20a9af0218cbcc910391fef24dc869471986940aab8219e72dd43d860065460405161206591815260200190565b60405180910390a25b80600660008282546120809190613049565b90915550505050565b6001600160a01b0384166120ed5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016107de565b336121068187876120fd886126d7565b610b01886126d7565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561218a5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016107de565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906121c7908490613049565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612227828888888888612730565b50505050505050565b6001600160a01b0384163b15611a8d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122749089908990889088908890600401612f30565b602060405180830381600087803b15801561228e57600080fd5b505af19250505080156122be575060408051601f3d908101601f191682019092526122bb91810190612db7565b60015b612374576122ca61314f565b806308c379a0141561230457506122df613167565b806122ea5750612306565b8060405162461bcd60e51b81526004016107de9190613012565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016107de565b6001600160e01b0319811663bc197c8160e01b146122275760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016107de565b60006115e1826004548561283b565b6001600160a01b0384166124545760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107de565b81518351146124b65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016107de565b3360005b845181101561256e578381815181106124e357634e487b7160e01b600052603260045260246000fd5b602002602001015160008087848151811061250e57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546125569190613049565b9091555081905061256681613108565b9150506124ba565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516125bf929190612fe4565b60405180910390a4610b0181600087878787612230565b6001600160a01b0384166126365760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107de565b33612647816000876120fd886126d7565b6000848152602081815260408083206001600160a01b038916845290915281208054859290612677908490613049565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610b0181600087878787612730565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061271f57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611a8d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906127749089908990889088908890600401612f8e565b602060405180830381600087803b15801561278e57600080fd5b505af19250505080156127be575060408051601f3d908101601f191682019092526127bb91810190612db7565b60015b6127ca576122ca61314f565b6001600160e01b0319811663f23a6e6160e01b146122275760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016107de565b6000826128488584612851565b14949350505050565b600081815b84518110156110c557600085828151811061288157634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116128c35760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506128f0565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806128fb81613108565b915050612856565b82805461290f906130a0565b90600052602060002090601f0160209004810192826129315760008555612977565b82601f1061294a57805160ff1916838001178555612977565b82800160010185558215612977579182015b8281111561297757825182559160200191906001019061295c565b50612983929150612987565b5090565b5b808211156129835760008155600101612988565b600067ffffffffffffffff8311156129b6576129b6613139565b6040516129cd601f8501601f1916602001826130db565b8091508381528484840111156129e257600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b0381168114612a1157600080fd5b919050565b600082601f830112612a26578081fd5b81356020612a3382613025565b604051612a4082826130db565b8381528281019150858301600585901b87018401881015612a5f578586fd5b855b85811015612a8457612a72826129fa565b84529284019290840190600101612a61565b5090979650505050505050565b600082601f830112612aa1578081fd5b81356020612aae82613025565b604051612abb82826130db565b8381528281019150858301600585901b87018401881015612ada578586fd5b855b85811015612a8457813584529284019290840190600101612adc565b600082601f830112612b08578081fd5b6115e18383356020850161299c565b600060208284031215612b28578081fd5b6115e1826129fa565b60008060408385031215612b43578081fd5b612b4c836129fa565b9150612b5a602084016129fa565b90509250929050565b600080600080600060a08688031215612b7a578081fd5b612b83866129fa565b9450612b91602087016129fa565b9350604086013567ffffffffffffffff80821115612bad578283fd5b612bb989838a01612a91565b94506060880135915080821115612bce578283fd5b612bda89838a01612a91565b93506080880135915080821115612bef578283fd5b50612bfc88828901612af8565b9150509295509295909350565b600080600080600060a08688031215612c20578081fd5b612c29866129fa565b9450612c37602087016129fa565b93506040860135925060608601359150608086013567ffffffffffffffff811115612c60578182fd5b612bfc88828901612af8565b60008060408385031215612c7e578182fd5b612c87836129fa565b91506020830135612c97816131f1565b809150509250929050565b60008060408385031215612cb4578182fd5b612cbd836129fa565b946020939093013593505050565b600060208284031215612cdc578081fd5b813567ffffffffffffffff811115612cf2578182fd5b612cfe84828501612a16565b949350505050565b60008060408385031215612d18578182fd5b823567ffffffffffffffff80821115612d2f578384fd5b612d3b86838701612a16565b93506020850135915080821115612d50578283fd5b50612d5d85828601612a91565b9150509250929050565b600060208284031215612d78578081fd5b81516115e1816131f1565b600060208284031215612d94578081fd5b5035919050565b600060208284031215612dac578081fd5b81356115e1816131ff565b600060208284031215612dc8578081fd5b81516115e1816131ff565b600060208284031215612de4578081fd5b813567ffffffffffffffff811115612dfa578182fd5b8201601f81018413612e0a578182fd5b612cfe8482356020840161299c565b600060208284031215612e2a578081fd5b5051919050565b600080600060408486031215612e45578081fd5b83359250602084013567ffffffffffffffff80821115612e63578283fd5b818601915086601f830112612e76578283fd5b813581811115612e84578384fd5b8760208260051b8501011115612e98578384fd5b6020830194508093505050509250925092565b6000815180845260208085019450808401835b83811015612eda57815187529582019590820190600101612ebe565b509495945050505050565b60008151808452815b81811015612f0a57602081850181015186830182015201612eee565b81811115612f1b5782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152612f5c60a0830186612eab565b8281036060840152612f6e8186612eab565b90508281036080840152612f828185612ee5565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612fc660a0830184612ee5565b979650505050505050565b6020815260006115e16020830184612eab565b604081526000612ff76040830185612eab565b82810360208401526130098185612eab565b95945050505050565b6020815260006115e16020830184612ee5565b600067ffffffffffffffff82111561303f5761303f613139565b5060051b60200190565b6000821982111561305c5761305c613123565b500190565b60008261307c57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561309b5761309b613123565b500290565b600181811c908216806130b457607f821691505b602082108114156130d557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561310157613101613139565b6040525050565b600060001982141561311c5761311c613123565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561316457600481823e5160e01c5b90565b600060443d10156131755790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156131a557505050505090565b82850191508151818111156131bd5750505050505090565b843d87010160208285010111156131d75750505050505090565b6131e6602082860101876130db565b509095945050505050565b80151581146108b057600080fd5b6001600160e01b0319811681146108b057600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212203c8374c8db7baf79e973b2f76b371721bbc3a01528f53d5b1add6e11407f536a64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102555760003560e01c80634e1273f411610149578063a22cb465116100c6578063eb817ebb1161008a578063f2fde38b11610064578063f2fde38b14610716578063f5aa406d14610736578063faa6d8d01461075657600080fd5b8063eb817ebb146106ce578063f0558c40146106e3578063f242432a146106f657600080fd5b8063a22cb46514610605578063ca4b208b14610625578063cbfbce2d14610645578063d67b06c114610665578063e985e9c51461068557600080fd5b80638cf1d5631161010d5780638cf1d563146105765780638da5cb5b1461058b57806395d89b41146105a9578063a18116f1146105da578063a1dd2c07146105ef57600080fd5b80634e1273f4146104de5780635b4b56291461050b57806365fcfd241461052b578063715018a61461054b5780637ebe626d1461056057600080fd5b806318160ddd116101d75780633360caa01161019b5780633360caa0146104485780633726b0a21461045e5780633ccfd60b146104965780634401dcfe146104ab57806345b5a4d8146104be57600080fd5b806318160ddd146103cb5780631f0234d8146103e1578063267e91fa146103f6578063292fef371461040c5780632eb2c2d61461042857600080fd5b80630ca282f71161021e5780630ca282f7146103415780630d5624b3146103615780630e89341c146103775780630fcf2e751461039757806314c95ddc146103af57600080fd5b8062fdd58e1461025a57806301ffc9a71461028d57806302fe5305146102bd57806306fdde03146102df5780630af1224314610321575b600080fd5b34801561026657600080fd5b5061027a610275366004612ca2565b610776565b6040519081526020015b60405180910390f35b34801561029957600080fd5b506102ad6102a8366004612d9b565b61080d565b6040519015158152602001610284565b3480156102c957600080fd5b506102dd6102d8366004612dd3565b61085f565b005b3480156102eb57600080fd5b506103146040518060400160405280600981526020016853686962654661636560b81b81525081565b6040516102849190613012565b34801561032d57600080fd5b506102dd61033c366004612d83565b6108b3565b34801561034d57600080fd5b506102dd61035c366004612d83565b61096a565b34801561036d57600080fd5b5061027a600b5481565b34801561038357600080fd5b50610314610392366004612d83565b6109b7565b3480156103a357600080fd5b50600c544210156102ad565b3480156103bb57600080fd5b5061027a670162ea854d0fc00081565b3480156103d757600080fd5b5061027a60065481565b3480156103ed57600080fd5b506102ad610a4b565b34801561040257600080fd5b5061027a60085481565b34801561041857600080fd5b5061027a6701140bbd030c400081565b34801561043457600080fd5b506102dd610443366004612b63565b610a66565b34801561045457600080fd5b5061027a600c5481565b34801561046a57600080fd5b5060095461047e906001600160a01b031681565b6040516001600160a01b039091168152602001610284565b3480156104a257600080fd5b506102dd610b08565b6102dd6104b9366004612e31565b610e8f565b3480156104ca57600080fd5b506102dd6104d9366004612b17565b610ef4565b3480156104ea57600080fd5b506104fe6104f9366004612d06565b610f6b565b6040516102849190612fd1565b34801561051757600080fd5b506102dd610526366004612e31565b6110cd565b34801561053757600080fd5b506102dd610546366004612d83565b611186565b34801561055757600080fd5b506102dd6111d3565b34801561056c57600080fd5b5061027a60075481565b34801561058257600080fd5b5061027a600c81565b34801561059757600080fd5b506003546001600160a01b031661047e565b3480156105b557600080fd5b5061031460405180604001604052806005815260200164534849424560d81b81525081565b3480156105e657600080fd5b5061027a606f81565b3480156105fb57600080fd5b5061027a6101bc81565b34801561061157600080fd5b506102dd610620366004612c6c565b611227565b34801561063157600080fd5b50600a5461047e906001600160a01b031681565b34801561065157600080fd5b506102dd610660366004612d83565b611236565b34801561067157600080fd5b506102dd610680366004612ccb565b611283565b34801561069157600080fd5b506102ad6106a0366004612b31565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b3480156106da57600080fd5b5061027a600281565b6102dd6106f1366004612d83565b61138d565b34801561070257600080fd5b506102dd610711366004612c09565b6113eb565b34801561072257600080fd5b506102dd610731366004612b17565b611472565b34801561074257600080fd5b506102dd610751366004612d83565b611528565b34801561076257600080fd5b506102dd610771366004612d83565b611575565b60006001600160a01b0383166107e75760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061083e57506001600160e01b031982166303a24d0760e21b145b8061085957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6003546001600160a01b031633146108a75760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b6108b0816115c2565b50565b6009546008546001600160a01b03909116906323b872dd90339030906108d990866115d5565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561092857600080fd5b505af115801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190612d67565b506108b0816115e8565b6003546001600160a01b031633146109b25760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b600c55565b6060600280546109c6906130a0565b80601f01602080910402602001604051908101604052809291908181526020018280546109f2906130a0565b8015610a3f5780601f10610a1457610100808354040283529160200191610a3f565b820191906000526020600020905b815481529060010190602001808311610a2257829003601f168201915b50505050509050919050565b600042600b5411158015610a61575042600c5410155b905090565b6001600160a01b038516331480610a825750610a8285336106a0565b610af45760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016107de565b610b01858585858561181b565b5050505050565b6003546001600160a01b03163314610b505760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b4780610b5b57600080fd5b600a80546000916001600160a01b0390911690610b789084613061565b604051600081818185875af1925050503d8060008114610bb4576040519150601f19603f3d011682016040523d82523d6000602084013e610bb9565b606091505b5050905080610c145760405162461bcd60e51b815260206004820152602160248201527f5472616e7366657220455448206661696c656420746f20646576656c6f7065726044820152601760f91b60648201526084016107de565b600033600a610c24856009613081565b610c2e9190613061565b604051600081818185875af1925050503d8060008114610c6a576040519150601f19603f3d011682016040523d82523d6000602084013e610c6f565b606091505b5050905080610cc05760405162461bcd60e51b815260206004820152601d60248201527f5472616e7366657220455448206661696c656420746f206f776e65722e00000060448201526064016107de565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610d0457600080fd5b505afa158015610d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3c9190612e19565b600954600a80549293506001600160a01b039182169263a9059cbb921690610d649085613061565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190612d67565b50600980546001600160a01b03169063a9059cbb903390600a90610e07908690613081565b610e119190613061565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610e5757600080fd5b505af1158015610e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b019190612d67565b610ea16701140bbd030c4000846115d5565b341015610ee45760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b41032ba3432b91760791b60448201526064016107de565b610eef838383611a95565b505050565b6003546001600160a01b03163314610f3c5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60608151835114610fd05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107de565b6000835167ffffffffffffffff811115610ffa57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611023578160200160208202803683370190505b50905060005b84518110156110c55761108a85828151811061105557634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061107d57634e487b7160e01b600052603260045260246000fd5b6020026020010151610776565b8282815181106110aa57634e487b7160e01b600052603260045260246000fd5b60209081029190910101526110be81613108565b9050611029565b509392505050565b6009546007546001600160a01b03909116906323b872dd90339030906110f390886115d5565b6040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561114257600080fd5b505af1158015611156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117a9190612d67565b50610eef838383611a95565b6003546001600160a01b031633146111ce5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b600b55565b6003546001600160a01b0316331461121b5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b6112256000611d08565b565b611232338383611d67565b5050565b6003546001600160a01b0316331461127e5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b600855565b6003546001600160a01b031633146112cb5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b6101bc81516006546112dd9190613049565b111561133d5760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b60648201526084016107de565b60005b81518110156112325761137b82828151811061136c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001611e48565b8061138581613108565b915050611340565b61139f670162ea854d0fc000826115d5565b3410156113e25760405162461bcd60e51b81526020600482015260116024820152702737ba1032b737bab3b41032ba3432b91760791b60448201526064016107de565b6108b0816115e8565b6001600160a01b038516331480611407575061140785336106a0565b6114655760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016107de565b610b018585858585612089565b6003546001600160a01b031633146114ba5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b6001600160a01b03811661151f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107de565b6108b081611d08565b6003546001600160a01b031633146115705760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b600455565b6003546001600160a01b031633146115bd5760405162461bcd60e51b8152602060048201819052602482015260008051602061321683398151915260448201526064016107de565b600755565b8051611232906002906020840190612903565b60006115e18284613081565b9392505050565b6002600554141561163b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107de565b6002600555600c544210156116925760405162461bcd60e51b815260206004820152601a60248201527f5075626c69632073616c65206973206e6f74206163746976652e00000000000060448201526064016107de565b600081116116e25760405162461bcd60e51b815260206004820152601d60248201527f436f756e74206d7573742062652067726561746572207468616e20302e00000060448201526064016107de565b336000908152600e6020526040902054600c90611700908390613049565b11156117745760405162461bcd60e51b815260206004820152603060248201527f43616e206e6f742065786365656420616d6f756e74207065722077616c6c657460448201527f20696e207075626c69632073616c652e0000000000000000000000000000000060648201526084016107de565b6101bc816006546117859190613049565b11156117e55760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b60648201526084016107de565b6117ef3382611e48565b336000908152600e60205260408120805483929061180e908490613049565b9091555050600160055550565b815183511461187d5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016107de565b6001600160a01b0384166118e15760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016107de565b3360005b8451811015611a2757600085828151811061191057634e487b7160e01b600052603260045260246000fd5b60200260200101519050600085838151811061193c57634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156119cf5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016107de565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611a0c908490613049565b9250508190555050505080611a2090613108565b90506118e5565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611a77929190612fe4565b60405180910390a4611a8d818787878787612230565b505050505050565b60026005541415611ae85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016107de565b6002600555611af5610a4b565b611b415760405162461bcd60e51b815260206004820152601760248201527f5072652d73616c65206973206e6f74206163746976652e00000000000000000060448201526064016107de565b336000908152600d6020526040902054600290611b5f908590613049565b1115611bc25760405162461bcd60e51b815260206004820152602c60248201527f43616e206e6f742065786365656420616d6f756e74207065722077616c6c657460448201526b1034b710383932b9b0b6329760a11b60648201526084016107de565b604080513360601b6bffffffffffffffffffffffff19166020808301919091528251601481840301815260349092019092528051910120611c36908383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506123e592505050565b611c6c5760405162461bcd60e51b8152602060048201526007602482015266125b9d985b1a5960ca1b60448201526064016107de565b606f60065410611cd05760405162461bcd60e51b815260206004820152602960248201527f436f756e74206578636565647320746865206d6178696d756d20616c6c6f7765604482015268321039bab838363c9760b91b60648201526084016107de565b611cda3384611e48565b336000908152600d602052604081208054859290611cf9908490613049565b90915550506001600555505050565b600380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03161415611ddb5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107de565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600181111561200a5760008167ffffffffffffffff811115611e7a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611ea3578160200160208202803683370190505b50905060008267ffffffffffffffff811115611ecf57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611ef8578160200160208202803683370190505b50905060005b83811015611f7f5780600654611f149190613049565b838281518110611f3457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506001828281518110611f6257634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611f7781613108565b915050611efe565b50611f9b848383604051806020016040528060008152506123f4565b60005b8381101561200257846001600160a01b03167f018291e2f20a9af0218cbcc910391fef24dc869471986940aab8219e72dd43d882600654611fdf9190613049565b60405190815260200160405180910390a280611ffa81613108565b915050611f9e565b50505061206e565b612028826006546001604051806020016040528060008152506125d6565b816001600160a01b03167f018291e2f20a9af0218cbcc910391fef24dc869471986940aab8219e72dd43d860065460405161206591815260200190565b60405180910390a25b80600660008282546120809190613049565b90915550505050565b6001600160a01b0384166120ed5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016107de565b336121068187876120fd886126d7565b610b01886126d7565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561218a5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016107de565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906121c7908490613049565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612227828888888888612730565b50505050505050565b6001600160a01b0384163b15611a8d5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122749089908990889088908890600401612f30565b602060405180830381600087803b15801561228e57600080fd5b505af19250505080156122be575060408051601f3d908101601f191682019092526122bb91810190612db7565b60015b612374576122ca61314f565b806308c379a0141561230457506122df613167565b806122ea5750612306565b8060405162461bcd60e51b81526004016107de9190613012565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016107de565b6001600160e01b0319811663bc197c8160e01b146122275760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016107de565b60006115e1826004548561283b565b6001600160a01b0384166124545760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107de565b81518351146124b65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016107de565b3360005b845181101561256e578381815181106124e357634e487b7160e01b600052603260045260246000fd5b602002602001015160008087848151811061250e57634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546125569190613049565b9091555081905061256681613108565b9150506124ba565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516125bf929190612fe4565b60405180910390a4610b0181600087878787612230565b6001600160a01b0384166126365760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107de565b33612647816000876120fd886126d7565b6000848152602081815260408083206001600160a01b038916845290915281208054859290612677908490613049565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610b0181600087878787612730565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061271f57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611a8d5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906127749089908990889088908890600401612f8e565b602060405180830381600087803b15801561278e57600080fd5b505af19250505080156127be575060408051601f3d908101601f191682019092526127bb91810190612db7565b60015b6127ca576122ca61314f565b6001600160e01b0319811663f23a6e6160e01b146122275760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016107de565b6000826128488584612851565b14949350505050565b600081815b84518110156110c557600085828151811061288157634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116128c35760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506128f0565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806128fb81613108565b915050612856565b82805461290f906130a0565b90600052602060002090601f0160209004810192826129315760008555612977565b82601f1061294a57805160ff1916838001178555612977565b82800160010185558215612977579182015b8281111561297757825182559160200191906001019061295c565b50612983929150612987565b5090565b5b808211156129835760008155600101612988565b600067ffffffffffffffff8311156129b6576129b6613139565b6040516129cd601f8501601f1916602001826130db565b8091508381528484840111156129e257600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b0381168114612a1157600080fd5b919050565b600082601f830112612a26578081fd5b81356020612a3382613025565b604051612a4082826130db565b8381528281019150858301600585901b87018401881015612a5f578586fd5b855b85811015612a8457612a72826129fa565b84529284019290840190600101612a61565b5090979650505050505050565b600082601f830112612aa1578081fd5b81356020612aae82613025565b604051612abb82826130db565b8381528281019150858301600585901b87018401881015612ada578586fd5b855b85811015612a8457813584529284019290840190600101612adc565b600082601f830112612b08578081fd5b6115e18383356020850161299c565b600060208284031215612b28578081fd5b6115e1826129fa565b60008060408385031215612b43578081fd5b612b4c836129fa565b9150612b5a602084016129fa565b90509250929050565b600080600080600060a08688031215612b7a578081fd5b612b83866129fa565b9450612b91602087016129fa565b9350604086013567ffffffffffffffff80821115612bad578283fd5b612bb989838a01612a91565b94506060880135915080821115612bce578283fd5b612bda89838a01612a91565b93506080880135915080821115612bef578283fd5b50612bfc88828901612af8565b9150509295509295909350565b600080600080600060a08688031215612c20578081fd5b612c29866129fa565b9450612c37602087016129fa565b93506040860135925060608601359150608086013567ffffffffffffffff811115612c60578182fd5b612bfc88828901612af8565b60008060408385031215612c7e578182fd5b612c87836129fa565b91506020830135612c97816131f1565b809150509250929050565b60008060408385031215612cb4578182fd5b612cbd836129fa565b946020939093013593505050565b600060208284031215612cdc578081fd5b813567ffffffffffffffff811115612cf2578182fd5b612cfe84828501612a16565b949350505050565b60008060408385031215612d18578182fd5b823567ffffffffffffffff80821115612d2f578384fd5b612d3b86838701612a16565b93506020850135915080821115612d50578283fd5b50612d5d85828601612a91565b9150509250929050565b600060208284031215612d78578081fd5b81516115e1816131f1565b600060208284031215612d94578081fd5b5035919050565b600060208284031215612dac578081fd5b81356115e1816131ff565b600060208284031215612dc8578081fd5b81516115e1816131ff565b600060208284031215612de4578081fd5b813567ffffffffffffffff811115612dfa578182fd5b8201601f81018413612e0a578182fd5b612cfe8482356020840161299c565b600060208284031215612e2a578081fd5b5051919050565b600080600060408486031215612e45578081fd5b83359250602084013567ffffffffffffffff80821115612e63578283fd5b818601915086601f830112612e76578283fd5b813581811115612e84578384fd5b8760208260051b8501011115612e98578384fd5b6020830194508093505050509250925092565b6000815180845260208085019450808401835b83811015612eda57815187529582019590820190600101612ebe565b509495945050505050565b60008151808452815b81811015612f0a57602081850181015186830182015201612eee565b81811115612f1b5782602083870101525b50601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525060a06040830152612f5c60a0830186612eab565b8281036060840152612f6e8186612eab565b90508281036080840152612f828185612ee5565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152612fc660a0830184612ee5565b979650505050505050565b6020815260006115e16020830184612eab565b604081526000612ff76040830185612eab565b82810360208401526130098185612eab565b95945050505050565b6020815260006115e16020830184612ee5565b600067ffffffffffffffff82111561303f5761303f613139565b5060051b60200190565b6000821982111561305c5761305c613123565b500190565b60008261307c57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561309b5761309b613123565b500290565b600181811c908216806130b457607f821691505b602082108114156130d557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561310157613101613139565b6040525050565b600060001982141561311c5761311c613123565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561316457600481823e5160e01c5b90565b600060443d10156131755790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156131a557505050505090565b82850191508151818111156131bd5750505050505090565b843d87010160208285010111156131d75750505050505090565b6131e6602082860101876130db565b509095945050505050565b80151581146108b057600080fd5b6001600160e01b0319811681146108b057600080fdfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212203c8374c8db7baf79e973b2f76b371721bbc3a01528f53d5b1add6e11407f536a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 170,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 176,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 178,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4241,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "whitelist",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      },
      {
        "astId": 115,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2983,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2998,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "presalePriceInShib",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3001,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "publicsalePriceInShib",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3004,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "shib",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3007,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "developer",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3010,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "preSaleStart",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3016,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "publicSaleStart",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3023,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "whitelist",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3027,
        "contract": "contracts/nft.sol:ShibeFace",
        "label": "publiclist",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}